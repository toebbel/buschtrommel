/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.tr0llhoehle.buschtrommel.gui;

import de.tr0llhoehle.buschtrommel.LoggerWrapper;
import de.tr0llhoehle.buschtrommel.network.ITransferProgress;
import de.tr0llhoehle.buschtrommel.network.ITransferProgress.TransferStatus;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;

/**
 * Renders a Transfers
 * @author benjamin
 */
public class DownloadItem extends javax.swing.JPanel implements ListCellRenderer<ITransferProgress> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Creates new form DownloadItem
	 */
	public DownloadItem() {
		initComponents();
	}

	@Override
	public Component getListCellRendererComponent(JList<? extends ITransferProgress> list, ITransferProgress value,
			int index, boolean isSelected, boolean cellHasFocus) {

		// setText(value.toString());

		Color background;
		Color foreground;

		// check if this cell represents the current DnD drop location
		JList.DropLocation dropLocation = list.getDropLocation();
		if (dropLocation != null && !dropLocation.isInsert() && dropLocation.getIndex() == index) {

			background = UIManager.getColor("List.background");
			foreground = UIManager.getColor("List.foreground");

			// check if this cell is selected
		} else if (isSelected) {
			background = UIManager.getColor("List.selectionBackground");
			foreground = UIManager.getColor("List.selectionForeground");

			// unselected, and not the DnD drop location
		} else {
			background = UIManager.getColor("List.background");
			foreground = UIManager.getColor("List.foreground");
		}
		;

		// set state
		TransferStatus.setText(statusToString(value.getStatus()));

		Filename.setText(value.getTargetFile());

		Long length = value.getLength();

		Long transferred = value.getTransferedAmount();

		double percent = (transferred.floatValue() / length.floatValue()) * 100;
		// System.out.println(percent);
		Progress.setMaximum(100);
		Progress.setValue((int) percent);
		Progress.setString(percent + "%");
		setBackground(background);
		setForeground(foreground);
		this.setOpaque(true);

		return this;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Progress = new javax.swing.JProgressBar();
        Filename = new javax.swing.JLabel();
        TransferStatus = new javax.swing.JTextField();

        Progress.setStringPainted(true);

        Filename.setText("File");
        Filename.setMaximumSize(new java.awt.Dimension(100, 18));
        Filename.setMinimumSize(new java.awt.Dimension(100, 18));
        Filename.setPreferredSize(new java.awt.Dimension(100, 18));

        TransferStatus.setEditable(false);
        TransferStatus.setText("FileTransferStatus");
        TransferStatus.setMaximumSize(new java.awt.Dimension(142, 28));
        TransferStatus.setMinimumSize(new java.awt.Dimension(142, 28));
        TransferStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Progress, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TransferStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TransferStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void TransferStatusActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_TransferStatusActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_TransferStatusActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Filename;
    private javax.swing.JProgressBar Progress;
    private javax.swing.JTextField TransferStatus;
    // End of variables declaration//GEN-END:variables

	public static String statusToString(TransferStatus transfer) {
		if (transfer == null) {
			return "42";
		}
		String status = "42";

		switch (transfer) {
		case Initialized:
			status = "Initialized";
			break;
		case Connecting:
			status = "Connecting";
			break;
		case Transfering:
			status = "Transfering";
			break;
		case AssembleParts:
			status = "AssembleParts";
			break;
		case CheckingHash:
			status = "CheckingHash";
			break;
		case Finished:
			status = "Finished";
			break;
		case TemporaryNotAvailable:
			status = "TemporaryNotAvailable";
			break;
		case PermanentlyNotAvailable:
			status = "PermanentlyNotAvailable";
			break;
		case ConnectionFailed:
			status = "ConnectionFailed";
			break;
		case LostConnection:
			status = "LostConnection";
			break;
		case LocalIOError:
			status = "LocalIOError - Please try a Reset";
			break;
		case InvalidContent:
			status = "InvalidContent";
			break;
		case Canceled:
			status = "Canceled";
			break;
		default:
			LoggerWrapper.logError("very invalid download state given");
		}

		return status;
	}
}
