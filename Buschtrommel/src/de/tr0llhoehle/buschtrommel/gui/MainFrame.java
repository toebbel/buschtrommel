/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 02.01.2013, 19:15:29
 */
package de.tr0llhoehle.buschtrommel.gui;

import de.tr0llhoehle.buschtrommel.Buschtrommel;
import de.tr0llhoehle.buschtrommel.IGUICallbacks;
import de.tr0llhoehle.buschtrommel.LoggerWrapper;
import de.tr0llhoehle.buschtrommel.models.Host;
import de.tr0llhoehle.buschtrommel.models.LocalShare;
import de.tr0llhoehle.buschtrommel.models.ShareAvailability;
import de.tr0llhoehle.buschtrommel.network.ITransferProgress;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 
 * @author benjamin
 */
public class MainFrame extends javax.swing.JFrame implements IGUICallbacks {

	private DefaultListModel<ITransferProgress> downloadItems = new DefaultListModel<ITransferProgress>();
	private DefaultListModel<ITransferProgress> outgoingItems = new DefaultListModel<ITransferProgress>();

	private DownloadItem downloadCellRenderer = new DownloadItem();
	private Buschtrommel buschtrommel;
	private FilesTableModel tablemodel = new FilesTableModel();
	private LocalSharesTableModel sharesModel = new LocalSharesTableModel();
	private String downloadPath = System.getProperty("user.home") + "/Downloads";
	private String defaultTtl = "-1";
	private String pathToShareSettings;
	private Timer transferTimer;
	private Timer transferOutTimer;

	/**
	 * Creates new form MainFrame
	 */
	public MainFrame() {
		setIconImage(Toolkit.getDefaultToolkit().getImage(
				MainFrame.class.getResource("/de/tr0llhoehle/buschtrommel/gui/res/djembe.png")));
		setTitle("Bongo");
		initComponents();
		String hostname = String.valueOf(Math.random());
		try {
			hostname = java.net.InetAddress.getLocalHost().getHostName();
		} catch (UnknownHostException e) {

			LoggerWrapper.logError("Couldn't get hostname");
		}
		buschtrommel = new Buschtrommel(this, "Bongo@" + hostname);
		try {
			buschtrommel.start();
		} catch (IOException ex) {
			Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
		filesHostsTable.setAutoCreateRowSorter(true);

		localSharesTable.setModel(sharesModel);
		localSharesTable.setAutoCreateRowSorter(true);
		downloadFolder.setText(downloadPath);

		readOldLocalShares();

		setupTimer();

		// filesHostsTable.setModel(tablemodel);
		// tablemodel.addMock("bla", "meta-information", "42", "üch", "ff::ff",
		// "trölf", "-1");
		// tablemodel.addMock("arrrr", "larp", "300000", "üch", "ff::ff",
		// "trölf", "-1");

	}

	private void setupTimer() {
		// timer
		int delay = 500; // milliseconds
		java.awt.event.ActionListener taskPerformer = new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				updateTransfers();
			}
		};
		transferTimer = new Timer(delay, taskPerformer);
		transferTimer.start();
		
		java.awt.event.ActionListener task2Performer = new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				updateOutTransfers();
			}
		};
		transferOutTimer = new Timer(delay, task2Performer);
		transferOutTimer.start();
	}

	protected void readOldLocalShares() {
		if (buschtrommel == null) {
			return;
		}
		Hashtable<String, LocalShare> temp_shares = buschtrommel.getLocalShares();
		for (String hash : temp_shares.keySet()) {
			LocalShare share = temp_shares.get(hash);
			String size = humanReadableByteCount(share.getLength(), true);
			sharesModel.addShareMeta(share.getDisplayName(), share.getMeta(), share.getPath(), size,
					String.valueOf(share.getTTL()));
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jFileChooser1 = new javax.swing.JFileChooser();
		pathChooser = new javax.swing.JFileChooser();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane3 = new javax.swing.JScrollPane();
		filesHostsTable = new javax.swing.JTable();
		downloadFiles = new javax.swing.JButton();
		downloadFilesMultihost = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		addShare = new javax.swing.JButton();
		removeShare = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		localSharesTable = new javax.swing.JTable();
		activateShare = new javax.swing.JButton();
		jPanel4 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		activeTransferList = new javax.swing.JList(downloadItems);
		abortTransfer = new javax.swing.JButton();
		resetTransfer = new javax.swing.JButton();
		resumeTransfer = new javax.swing.JButton();
		removeTransfer = new javax.swing.JButton();
		jPanel6 = new javax.swing.JPanel();
		jScrollPane4 = new javax.swing.JScrollPane();
		outgoingTransferList = new javax.swing.JList(outgoingItems);
		abortOutTransfer = new javax.swing.JButton();
		resetOutTransfer = new javax.swing.JButton();
		removeOutTransfer = new javax.swing.JButton();
		jPanel5 = new javax.swing.JPanel();
		saveSettings = new javax.swing.JButton();
		jTextField1 = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		loadSettings = new javax.swing.JButton();
		jTextField2 = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		downloadFolder = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		selectDownloadFolder = new javax.swing.JButton();

		jFileChooser1.setDialogTitle("Datei wählen");

		pathChooser.setDialogTitle("Ort wählen");
		pathChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Bongo");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				formWindowClosing(evt);
			}
		});

		jTabbedPane1.setName("files-table"); // NOI18N

		jPanel1.setName("filesTab"); // NOI18N

		filesHostsTable.setModel(tablemodel);
		jScrollPane3.setViewportView(filesHostsTable);

		downloadFiles.setText("Download selected Files");
		downloadFiles.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				downloadFilesActionPerformed(evt);
			}
		});

		downloadFilesMultihost.setText("Download selected Files (Multihost)");
		downloadFilesMultihost.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				downloadFilesMultihostActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(downloadFiles)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(downloadFilesMultihost)
																		.addGap(0, 0, Short.MAX_VALUE))
														.addComponent(jScrollPane3,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE, 780,
																Short.MAX_VALUE)).addContainerGap()));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel1Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(downloadFiles).addComponent(downloadFilesMultihost))
								.addContainerGap()));

		jTabbedPane1.addTab("Hosts & Files", jPanel1);

		jPanel3.setName("sharesTab"); // NOI18N

		addShare.setText("Add new Share");
		addShare.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		addShare.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addShareActionPerformed(evt);
			}
		});

		removeShare.setText("Remove Share");
		removeShare.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeShareActionPerformed(evt);
				removeShareActionPerformed1(evt);
			}
		});

		jScrollPane2.setName("shares-table"); // NOI18N

		localSharesTable.setModel(sharesModel);
		localSharesTable.setName(""); // NOI18N
		jScrollPane2.setViewportView(localSharesTable);

		activateShare.setText("activate Share");
		activateShare.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				activateShareActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel3Layout
								.createSequentialGroup()
								.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										jPanel3Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(addShare)
												.addGroup(
														jPanel3Layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		false)
																.addComponent(removeShare,
																		javax.swing.GroupLayout.Alignment.LEADING,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(activateShare,
																		javax.swing.GroupLayout.Alignment.LEADING,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE))).addContainerGap()));
		jPanel3Layout
				.setVerticalGroup(jPanel3Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel3Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel3Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jScrollPane2,
																javax.swing.GroupLayout.DEFAULT_SIZE, 619,
																Short.MAX_VALUE)
														.addGroup(
																jPanel3Layout
																		.createSequentialGroup()
																		.addComponent(addShare)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(activateShare).addGap(18, 18, 18)
																		.addComponent(removeShare)
																		.addGap(0, 0, Short.MAX_VALUE)))
										.addContainerGap()));

		jTabbedPane1.addTab("Shares", jPanel3);

		jPanel4.setName("activeTransfersTab"); // NOI18N

		activeTransferList.setCellRenderer(downloadCellRenderer);
		jScrollPane1.setViewportView(activeTransferList);

		abortTransfer.setText("Cancel");
		abortTransfer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				abortTransferActionPerformed(evt);
			}
		});

		resetTransfer.setText("Reset");
		resetTransfer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				resetTransferActionPerformed(evt);
			}
		});

		resumeTransfer.setText("Resume");
		resumeTransfer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				resumeTransferActionPerformed(evt);
			}
		});

		removeTransfer.setText("Remove");
		removeTransfer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeTransferActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel4Layout
								.createSequentialGroup()
								.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										jPanel4Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(removeTransfer, javax.swing.GroupLayout.DEFAULT_SIZE, 82,
														Short.MAX_VALUE)
												.addComponent(resumeTransfer, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(resetTransfer, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(abortTransfer, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addGap(4, 4, 4)));
		jPanel4Layout
				.setVerticalGroup(jPanel4Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel4Layout
										.createSequentialGroup()
										.addGroup(
												jPanel4Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel4Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(abortTransfer)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(resetTransfer)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(resumeTransfer)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(removeTransfer)
																		.addGap(0, 0, Short.MAX_VALUE))
														.addComponent(jScrollPane1,
																javax.swing.GroupLayout.DEFAULT_SIZE, 631,
																Short.MAX_VALUE)).addContainerGap()));

		jTabbedPane1.addTab("active Downloads", jPanel4);

		jPanel6.setName("outgoingTransfersTab"); // NOI18N

		activeTransferList.setCellRenderer(downloadCellRenderer);
		jScrollPane4.setViewportView(outgoingTransferList);

		abortOutTransfer.setText("Cancel");
		abortOutTransfer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				abortOutTransferActionPerformed(evt);
			}
		});

		resetOutTransfer.setText("Reset");
		resetOutTransfer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				resetOutTransferActionPerformed(evt);
			}
		});

		removeOutTransfer.setText("Remove");
		removeOutTransfer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeOutTransferActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel6Layout
								.createSequentialGroup()
								.addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										jPanel6Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(removeOutTransfer, javax.swing.GroupLayout.DEFAULT_SIZE,
														82, Short.MAX_VALUE)
												.addComponent(resetOutTransfer, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(abortOutTransfer, javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addGap(4, 4, 4)));
		jPanel6Layout
				.setVerticalGroup(jPanel6Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel6Layout
										.createSequentialGroup()
										.addGroup(
												jPanel6Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel6Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(abortOutTransfer)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(resetOutTransfer)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(removeOutTransfer)
																		.addGap(0, 0, Short.MAX_VALUE))
														.addComponent(jScrollPane4,
																javax.swing.GroupLayout.DEFAULT_SIZE, 631,
																Short.MAX_VALUE)).addContainerGap()));

		jTabbedPane1.addTab("outgoing Transfers", jPanel6);

		jPanel5.setName("settingsTab"); // NOI18N

		saveSettings.setText("save Settings");
		saveSettings.setName("saveSettings_btn"); // NOI18N
		saveSettings.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveSettingsActionPerformed(evt);
			}
		});

		jLabel1.setText("Path to Share-Settings");

		loadSettings.setText("load Settings");
		loadSettings.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadSettingsActionPerformed(evt);
			}
		});

		jTextField2.setText("-1");
		jTextField2.setToolTipText("-1 = unlimited");

		jLabel2.setText("Default TTL");

		downloadFolder.setEditable(false);

		jLabel3.setText("Download Folder");

		selectDownloadFolder.setText("select");
		selectDownloadFolder.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				selectDownloadFolderActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout
				.setHorizontalGroup(jPanel5Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel5Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel5Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel5Layout
																		.createSequentialGroup()
																		.addGap(0, 545, Short.MAX_VALUE)
																		.addComponent(loadSettings)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(saveSettings))
														.addGroup(
																jPanel5Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel5Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(jLabel1)
																						.addComponent(jLabel2)
																						.addComponent(jLabel3))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				jPanel5Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(
																								jPanel5Layout
																										.createSequentialGroup()
																										.addComponent(
																												downloadFolder)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addComponent(
																												selectDownloadFolder))
																						.addComponent(jTextField2)
																						.addComponent(jTextField1))))
										.addContainerGap()));
		jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel5Layout
								.createSequentialGroup()
								.addGap(22, 22, 22)
								.addGroup(
										jPanel5Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										jPanel5Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel2))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										jPanel5Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(downloadFolder, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel3)
												.addComponent(selectDownloadFolder))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 481,
										Short.MAX_VALUE)
								.addGroup(
										jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(saveSettings).addComponent(loadSettings))
								.addContainerGap()));

		saveSettings.getAccessibleContext().setAccessibleName("save_Settings");

		jTabbedPane1.addTab("Settings", jPanel5);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(jTabbedPane1)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(jTabbedPane1)));

		jTabbedPane1.getAccessibleContext().setAccessibleName("");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void abortOutTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortOutTransferActionPerformed
    	
		int items_to_delete[] = null;
		if (!outgoingTransferList.isSelectionEmpty()) {
			items_to_delete = outgoingTransferList.getSelectedIndices();
		} else {
			return;
		}

		if (items_to_delete != null) {

			for (int i = items_to_delete.length - 1; i >= 0; i--) {

				outgoingItems.elementAt(i).cancel();

			}

		}
    }//GEN-LAST:event_abortOutTransferActionPerformed

	private void resetOutTransferActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resetOutTransferActionPerformed
		int items_to_reset[] = null;
		if (!outgoingTransferList.isSelectionEmpty()) {
			items_to_reset = outgoingTransferList.getSelectedIndices();
		} else {
			return;
		}

		if (items_to_reset != null) {

			for (int i = items_to_reset.length - 1; i >= 0; i--) {
				// System.out.println("deleting: " + items_to_delete[i]);
				outgoingItems.elementAt(i).reset();
				outgoingItems.notify();

				// remove from list
				// listmodel.remove(items_to_reset[i]);
			}
			// list.setListData(items);
		}
	}// GEN-LAST:event_resetOutTransferActionPerformed

	private void removeOutTransferActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeOutTransferActionPerformed
		int items_to_delete[] = null;
		if (!outgoingTransferList.isSelectionEmpty()) {
			items_to_delete = outgoingTransferList.getSelectedIndices();
		} else {
			return;
		}

		if (items_to_delete != null) {

			for (int i = items_to_delete.length - 1; i >= 0; i--) {
				// System.out.println("deleting: " + items_to_delete[i]);
				outgoingItems.elementAt(i).cancel();
				outgoingItems.elementAt(i).cleanup();

				// remove from list
				outgoingItems.remove(items_to_delete[i]);
			}

		}
	}// GEN-LAST:event_removeOutTransferActionPerformed

	/*
	 * as long as a transfer is in the list, it is forced to repaint every
	 * second
	 */
	private void updateTransfers() {
		activeTransferList.repaint();
		if (downloadItems.isEmpty()) {

			transferTimer.stop();

		}
	}
	
	private void updateOutTransfers() {
		outgoingTransferList.repaint();
		if (outgoingItems.isEmpty()) {

			transferOutTimer.stop();

		}
	}

	private void removeTransferActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeTransferActionPerformed
		int items_to_delete[] = null;
		if (!activeTransferList.isSelectionEmpty()) {
			items_to_delete = activeTransferList.getSelectedIndices();
		} else {
			return;
		}

		if (items_to_delete != null) {

			for (int i = items_to_delete.length - 1; i >= 0; i--) {
				// System.out.println("deleting: " + items_to_delete[i]);
				downloadItems.elementAt(i).cancel();
				downloadItems.elementAt(i).cleanup();

				// remove from list
				downloadItems.remove(items_to_delete[i]);
			}

		}
	}// GEN-LAST:event_removeTransferActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing
		// TODO timer to force close
		if (transferTimer.isRunning()) {
			transferTimer.stop();
		}
		
		if (transferOutTimer.isRunning()) {
			transferOutTimer.stop();
		}

		if (buschtrommel != null) {
			LoggerWrapper.logInfo("Exiting");
			try {

				buschtrommel.stop();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				LoggerWrapper.logError("Buschtrommel could not be stopped");
			}
		}

	}// GEN-LAST:event_formWindowClosing

	private void selectDownloadFolderActionPerformed(ActionEvent evt) {
		// jFileChooser1.setDialogTitle("Ort wählen");
		// jFileChooser1.setFileSelectionMode(jFileChooser1.DIRECTORIES_ONLY);
		int returnVal = pathChooser.showOpenDialog(this);
		if (returnVal == pathChooser.APPROVE_OPTION) {
			File file = pathChooser.getSelectedFile();
			// try {
			// What to do with the file, e.g. display it in a TextArea
			// textarea.read( new FileReader( file.getAbsolutePath() ), null );
			downloadPath = file.getAbsolutePath();
			downloadFolder.setText(downloadPath);

			// System.out.println(file.getAbsolutePath());
			// System.out.println( new FileReader( file.getAbsolutePath() ),
			// null );
			// } catch (IOException ex) {
			// System.out.println("problem accessing file"+file.getAbsolutePath());
			// }
		} else {
			// System.out.println("File access cancelled by user.");
		}
	}

	private void activateShareActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_activateShareActionPerformed
		int selected[] = localSharesTable.getSelectedRows();
		for (int i : selected) {
			sharesModel.getValueAt(i, 0);

			if (buschtrommel != null) {
				// "Filename", "Meta-Information", "Path", "Size","TTL"
				String name = sharesModel.getValueAt(i, 0);
				String meta = sharesModel.getValueAt(i, 1);
				String path = sharesModel.getValueAt(i, 2);
				int ttl = Integer.parseInt(sharesModel.getValueAt(i, 4));

				try {
					LoggerWrapper.logInfo("Trying to add new share: " + " name: " + name + " meta: " + meta + " path: "
							+ path + " ttl: " + ttl);
					buschtrommel.AddFileToShare(path, name, meta, ttl);
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					JOptionPane.showMessageDialog(null, "Woops, something went terribly wrong");
					sharesModel.removeShare(i);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					JOptionPane.showMessageDialog(null, "Woops, something went terribly wrong");
					sharesModel.removeShare(i);
				}
			}
		}
	}// GEN-LAST:event_activateShareActionPerformed

	private void downloadFilesActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_downloadFilesBtn1ActionPerformed
		if (downloadPath == null) {
			JOptionPane.showMessageDialog(null, "Please set a Download-Folder first");
			return;
		}

		int[] selected = filesHostsTable.getSelectedRows();

		for (int i : selected) {
			// "Filename", "Meta-Information", "Size", "Host-Name","IP", "Hash",
			// "TTL"
			String hash = tablemodel.getValueAt(i, 5);
			String ip = tablemodel.getValueAt(i, 4);
			String name = tablemodel.getValueAt(i, 0);
			if (buschtrommel != null) {
				Host host = null;
				try {
					host = buschtrommel.getHosts().get(InetAddress.getByName(ip));
				} catch (UnknownHostException e) {
				}

				if (host == null) {
					LoggerWrapper.logError("Can't start download - the host is unknown");
					return;
				}
				ITransferProgress progress = buschtrommel.DownloadFile(hash, downloadPath + "/" + name, host);

				if (progress != null) {
					downloadItems.addElement(progress);
					if (!transferTimer.isRunning()) {
						transferTimer.start();
					}
				} else {
					LoggerWrapper.logError("Something with the download went wrong");
				}
			}
		}

	}// GEN-LAST:event_downloadFilesBtn1ActionPerformed

	private void downloadFilesMultihostActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		if (downloadPath == null) {
			JOptionPane.showMessageDialog(null, "Please set a Download-Folder first");
			return;
		}

		int[] selected = filesHostsTable.getSelectedRows();

		for (int i : selected) {
			// "Filename", "Meta-Information", "Size", "Host-Name","IP", "Hash",
			// "TTL"
			String hash = tablemodel.getValueAt(i, 5);

			String name = tablemodel.getValueAt(i, 0);
			if (buschtrommel != null) {

				ITransferProgress progress = buschtrommel.DownloadFile(hash, downloadPath + "/" + name);
				downloadItems.addElement(progress);
				if (!transferTimer.isRunning()) {
					transferTimer.start();
				}
			}
		}

	}// GEN-LAST:event_jButton1ActionPerformed

	private void saveSettingsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveSettingsActionPerformed
		// java.io.File cfgFile = new File("config-gui.xml");
		// if (cfgFile.exists()) {
		// try {
		// Config.readFromFile(cfgFile);
		// if (Config.alias == null)
		// Config.alias = alias;
		// return;
		// } catch (FileNotFoundException e) {
		// LoggerWrapper.logError("Could not read config file: " +
		// e.getMessage());
		// e.printStackTrace();
		// }
		// }

	}// GEN-LAST:event_saveSettingsActionPerformed

	private void removeShareActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeShareActionPerformed
		int selected[] = localSharesTable.getSelectedRows();
		for (int i : selected) {
			sharesModel.getValueAt(i, 0);

			if (buschtrommel != null) {
				sharesModel.removeShare(i);

			}
		}
	}// GEN-LAST:event_removeShareActionPerformed

	private void loadSettingsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadSettingsActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_loadSettingsActionPerformed

	private void removeShareActionPerformed1(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeShareActionPerformed1
	}// GEN-LAST:event_removeShareActionPerformed1

	public static String humanReadableByteCount(long bytes, boolean si) {
		int unit = si ? 1000 : 1024;
		if (bytes < unit)
			return bytes + " B";
		int exp = (int) (Math.log(bytes) / Math.log(unit));
		String pre = (si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");
		return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
	}

	private void addShareActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addShareActionPerformed

		// jFileChooser1.setCurrentDirectory(null);
		jFileChooser1.setFileSelectionMode(jFileChooser1.FILES_ONLY);

		int returnVal = jFileChooser1.showOpenDialog(this);
		if (returnVal == jFileChooser1.APPROVE_OPTION) {
			File file = jFileChooser1.getSelectedFile();
			// try {
			// What to do with the file, e.g. display it in a TextArea
			// textarea.read( new FileReader( file.getAbsolutePath() ), null );
			String size = humanReadableByteCount(file.length(), true);
			// String.valueOf(file.length())

			sharesModel.addShare(file.getName(), file.getAbsolutePath(), size, defaultTtl);
			// System.out.println(file.getAbsolutePath());
			// System.out.println( new FileReader( file.getAbsolutePath() ),
			// null );
			// } catch (IOException ex) {
			// System.out.println("problem accessing file"+file.getAbsolutePath());
			// }
		} else {
			// System.out.println("File access cancelled by user.");
		}
	}// GEN-LAST:event_addShareActionPerformed

	private void resumeTransferActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resumeTransferActionPerformed
		int items_to_reset[] = null;
		if (!activeTransferList.isSelectionEmpty()) {
			items_to_reset = activeTransferList.getSelectedIndices();
		} else {
			return;
		}

		if (items_to_reset != null) {

			for (int i = items_to_reset.length - 1; i >= 0; i--) {
				// System.out.println("deleting: " + items_to_delete[i]);
				downloadItems.elementAt(i).resumeTransfer();
				downloadItems.notify();

				// remove from list
				// listmodel.remove(items_to_reset[i]);
			}
			// list.setListData(items);
		}
	}// GEN-LAST:event_resumeTransferActionPerformed

	private void resetTransferActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resetTransferActionPerformed


		int items_to_reset[] = null;
		if (!activeTransferList.isSelectionEmpty()) {
			items_to_reset = activeTransferList.getSelectedIndices();
		} else {
			return;
		}

		if (items_to_reset != null) {

			for (int i = items_to_reset.length - 1; i >= 0; i--) {
				// System.out.println("deleting: " + items_to_delete[i]);
				downloadItems.elementAt(i).reset();
				downloadItems.notify();

				// remove from list
				// listmodel.remove(items_to_reset[i]);
			}
			// list.setListData(items);
		}

	}// GEN-LAST:event_resetTransferActionPerformed

	private void abortTransferActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_abortTransferActionPerformed


		int items_to_delete[] = null;
		if (!activeTransferList.isSelectionEmpty()) {
			items_to_delete = activeTransferList.getSelectedIndices();
		} else {
			return;
		}

		if (items_to_delete != null) {

			for (int i = items_to_delete.length - 1; i >= 0; i--) {

				downloadItems.elementAt(i).cancel();

			}

		}

	}// GEN-LAST:event_abortTransferActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Sytem look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
			// for (javax.swing.UIManager.LookAndFeelInfo info :
			// javax.swing.UIManager.getInstalledLookAndFeels()) {
			// if ("Nimbus".equals(info.getName())) {
			// javax.swing.UIManager.setLookAndFeel(info.getClassName());
			// break;
			// }
			// }
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainFrame().setVisible(true);

			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton abortOutTransfer;
	private javax.swing.JButton abortTransfer;
	private javax.swing.JButton activateShare;
	private javax.swing.JList activeTransferList;
	private javax.swing.JButton addShare;
	private javax.swing.JButton downloadFiles;
	private javax.swing.JButton downloadFilesMultihost;
	private javax.swing.JTextField downloadFolder;
	private javax.swing.JTable filesHostsTable;
	private javax.swing.JFileChooser jFileChooser1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JTextField jTextField2;
	private javax.swing.JButton loadSettings;
	private javax.swing.JTable localSharesTable;
	private javax.swing.JList outgoingTransferList;
	private javax.swing.JFileChooser pathChooser;
	private javax.swing.JButton removeOutTransfer;
	private javax.swing.JButton removeShare;
	private javax.swing.JButton removeTransfer;
	private javax.swing.JButton resetOutTransfer;
	private javax.swing.JButton resetTransfer;
	private javax.swing.JButton resumeTransfer;
	private javax.swing.JButton saveSettings;
	private javax.swing.JButton selectDownloadFolder;

	// End of variables declaration//GEN-END:variables

	@Override
	public void newHostDiscovered(Host host) {
		tablemodel.newHostDiscovered(host);
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public void hostWentOffline(Host host) {
		tablemodel.hostWentOffline(host);
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public void removeShare(ShareAvailability file) {
		tablemodel.removeShare(file);
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public void newShareAvailable(ShareAvailability file) {
		// filesHostsTable.setModel(filesModel);
		tablemodel.addShare(file);
		// throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public void updatedTTL(ShareAvailability file) {
		// throw new UnsupportedOperationException("Not supported yet.");
		tablemodel.updatedTTL(file);
	}

	@Override
	public void newOutgoingTransferStarted(ITransferProgress transfer) {
		if (transfer != null) {
			outgoingItems.addElement(transfer);
			if (!transferOutTimer.isRunning()) {
				transferOutTimer.start();
			}
		} else {
			LoggerWrapper.logError("Something with the outgoing transfer went wrong");
		}
		
	}

}
