<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!-- vim: set noexpandtab : -->
<rfc ipr="none">
	<front>
		<title>Buschtrommel</title>
		<author />
		<date />
		<area>Applications</area>
		<workgroup>Telematics project 12/13</workgroup>
		<abstract>
			<t>This document is a draft for the official specification of the Buschtrommel protocol. Buschtrommel is used to find and transfer files between clients in the same network domain without the need for a central server.</t>
		</abstract>
	</front>
	<middle>
		<section title="Introduction">
			<t>This document specifies the Buschtrommel protocol, which is used for ad-hoc file transfer between peers in the same network domain.</t>
			<t>This specification defines package formats and required client behaviour to enable such file transfers between conforming, well-behaved clients.</t>
			<t>This document describes the mechanisms required for completion of the following tasks:
				<list style="symbols">
					<t>peer discovery</t>
					<t>file announcement</t>
					<t>file transfer</t>
				</list>
			</t>
			<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
		</section>

		<section title="High Level Overview">
			<t>
				Buschtrommel is focused on scenarios where the set of shared files is changed frequently. Files are announced in a short-termed fashion. The fast announcement of new clients and files is one of the main focuses.
			</t>
			<t>The protocol features can be roughly split into four tasks:
				<list style="symbols">
					<t>announcements of peers</t>
					<t>exploration of offered files</t>
					<t>updates of offered files</t>
					<t>file transfers</t>
				</list>
			</t>
		</section>


		<section title="General Notes">
			<t>
				Buschtrommel uses the following multicast addresses to address all participating peers:
				<list style="symbols">
					<t>239.255.0.113 for IPv4</t>
					<t>ff05::7171 for IPv6</t>
				</list>
			</t>
			<t>All UDP packets sent SHALL have a destination port of 4747 set. In order to participate in the network a client must listen on this port.</t>
			<t>Messages sent using UDP MUST NOT exceed 512 octets length.</t>

			<t>Messages are strings encoded as UTF-8. Messages contain several fields which are seperated by a field separator. In addition each message is terminated by a message separator.
			<list style="symbols">
				<t>field seperator: ASCII control character 31 (Unit Separator, U+001F)</t>
				<t>message seperator: ASCII control character 30 (Record Separator, U+001E)</t>
			</list>
			In this document, "|" is used to visualize a field separator and "\" is used to visualize a message separator.</t>
			<t>Integers are represented in their decimal form, encoded as UTF-8 strings. SHA-1 hashes MUST be encoded without leading "0x", e. g. "440aa37400eeae2e7f4d54cece14e547a57b189b".</t>
			<t>All control messages are of the following format:</t>
			<t><figure align="center">
					<artwork>Type|Field1|Field2|[...]|Fieldn\</artwork>
			</figure></t>
			<t>The "Type" field identifies the message type while all remaining fields carry information as of the message type specification. Fields MUST NOT contain any of the field or message separator characters. </t>
		</section>


		<section title="Peer Discovery">
			<section title="Hi Message">
				<t>A peer MAY send a "Hi" message at any time to inform other peers of its presence and to request a reply from all peers in form of a "Yo" message. A "Hi" message SHOULD be sent to the multicast address of all participating peers immediately after joining the network.</t>

				<t>A "Hi" message is sent using UDP and contains the following fields in the the given order:</t>
				<t>
					<list style="symbols">
						<t>The "Type" field, set to "Hi".</t>
						<t>A "Port" field containing an integer identifying a valid TCP port that the peer sending the message uses for Buschtrommel TCP communication. The peer MUST listen for incoming connections from other peers on this port. Note that this number is also encoded as an UTF-8 string.</t>
						<t>An "Alias" field as an human-readable name that is to be displayed by a client for the peer sending the message. The field may be empty, but MUST NOT be omitted.</t>
					</list>
				</t>
				<t>Fields of a "Hi" message:
				<figure align="center">
					<artwork>Type|Port|Alias\</artwork>
			</figure></t>
				<t>A client SHOULD only send as many "Hi" messages as are required for its operation.</t>
			</section>
			
			<section title="Yo Message">
				<t>"Yo" messages are sent as replies to "Hi" messages. Every "Hi" message SHOULD be replied to with a "Yo" message. "Yo" messages are sent either directly to the unicast address of the sender of the "Hi" message that is being replied to or to the multicast address of all participating peers.</t>
				<t>A "Yo" message is sent using UDP and has its "Type" field set to "Yo". All other fields are identical to those of a "Hi" message.</t>
				<t>Fields of a "Yo" message:
				<figure align="center">
						<artwork>Type|Port|Alias\</artwork>
				</figure></t>
				<t>Clients MAY use "Yo" messages they receive to update their internal state concerning the availability of other peers.</t>
			</section>
			
			<section title="Bye Message">
				<t>"Bye" messages are used to inform all network participants that a peer is going to leave the network.</t>
				<t>They are sent using UDP and contain only a "Type" field set to "Bye".</t>
				<t>Fields of a "Bye" message:
				<figure align="center">
						<artwork>Type\</artwork>
				</figure></t>
				<t>Clients SHOULD send a "Bye" message to all participating peers before leaving the network. Clients receiving a "Bye" message SHOULD assume that the sending peer as well as all files previously offered for transfer by this peer are no longer available.  Note that "Bye" messages are unreliable and a client might leave the network without a "Bye" message reaching participating peers. The "Bye" message SHOULD be sent to the multicast address of all participating peers.</t>
			</section>
		</section>


		<section title="File Discovery">
			<section title="File Announcement Messages">
				<t>
					File Announcement Messages are used to inform other clients about files offered for transfer by oneself.

					A File Announcement Message is contains the following fields in the following order:

					<list>
						<t>The Type field, set to "File".</t>
						<t>A Hash field, containing a lowercase hexadecimal representation of the SHA-1 hash of the file.</t>
						<t>A TTL field, indicating the expected remaining time that this file will be made available for transfer in seconds. A value of -1 SHALL be used to indicate an indefinite amount of time. A value of 0 may be used to indicate that a file is no longer available for transfer. The integer must be in the range of a 64-bit signed integer datatype.</t>
						<t>A Length field, indicating the length of the file offered in octets</t>
						<t>A Display Name field, containing a human-readable name for the file. All Unicode characters (expect those excluded above) may be used. A directory structure MAY be encoded in the value of this member. If this is the case, the '/' character (U+002F) MUST be used as a path separator.</t>
						<t>A Meta Information field, containing additional information about a file. The information encoded in this field SHOULD be human-readable.</t>
					</list>
				</t>
			</section>
			<section title="Accumulated File Announcement Messages using TCP">
				<t>A "Get Filelist" Message is a message which has its Type field set to "Get Filelist". This message type has no other fields.</t>
				<t>To request a complete announcement of all files offered for transfer by a peer, a client may open a connection to the other peer using the peers's announced TCP port and send a "Get Filelist" Message. The other peer MUST reply with exactly one File Announcement Message for each file offered for transfer. After all messages have been sent, the other peer MUST close the connection.</t>
			</section>
			<section title="Updating File Announcement Messages using UDP">
				<t>A peer may at any time send a File Announcement Message encapsulated in a single UDP packet to the multicast address of all participating peers. Other peers MUST use these messages to update their internal state concerning the availability of files for transfer from other peers. This mechanism MUST be used to announce if a file will no longer be available for transfer, e.g. if it has been deleted or the peer is about to leave the network.</t>
			</section>
		</section>

		<section title="File Transfer">
			<section title='"Get File" Messages'>
				<t>To request the transfer of a file, a client may open a connection to the peer offering the file using the peer's announced TCP port an send a "Get File" Message.</t>

				<t>"Get File" messages are used to request the transfer of a file from another peer.</t>

				<t>A "Get File" message contains the following fields in the following order:
					<list>
						<t>The Type field, set to "Get File".</t>
						<t>A Hash field, set to the SHA-1 hash in lowercase hexadecimal representation of the requested file. A client SHOULD request only files that have been announced as available for transfer from that host.</t>
						<t>An Offset field, indicating the number of octets from the beginning of the file that the sending host should skip. This value MUST be in the range of a 64-bit unsigned integer datatype.</t>
						<t>A Length field, indicating the number of octets of the file that the receiving host wishes to receive from the offset onward. This value MUST be in the range of a 64-bit unsigned integer datatype.</t>
					</list>
				</t>
			</section>

			<section title="File Transfer Response Messages">
				<t>The peer receiving the "Get File" message MUST reply with a File Transfer Response message. If appropriate according to the status communicated in the File Transfer Response Message, it MUST then send the requested data and close the connection. The Length and Offset fields of the "Get File" message MUST be respected.</t>

				<t>
					File Transfer Response Messages are used to confirm or indicate an error concerning a request for transfer using a "Get File" message.

					A File Transfer Response Message contains the following fields in the following order:
					<list>
						<t>The Type field, set to "File Transfer Response".</t>
						<t>A Status Code field, indicating if the file request can be served. Valid values are "OK" if the sending peer is ready to send the file, "Try Again Later" if the file cannot currently be served but the problem is expected to be resolved in the future or "Never Try Again" if the file cannot currently be served and the problem is not expected to be resolved in the future (e.g. if the file does not exist).</t>
						<t>An Expected Transfer Volume field, indicating the number of octets of the file that the peer expects to send. This MAY be less than the amount requested in the "Get File" message.</t>
					</list>
				</t>
			</section>
		</section>
	</middle>

	<back>
		<references>
			<reference anchor="RFC2119">
				<front>
					<title abbrev="RFC Key Words">
						Key words for use in RFCs to Indicate Requirement Levels
					</title>
					<author initials="S." surname="Bradner" fullname="Scott Bradner">
						<organization>Harvard University</organization>
						<address>
							<postal>
								<street>1350 Mass. Ave.</street>
								<street>Cambridge</street>
								<street>MA 02138</street>
							</postal>
							<phone>- +1 617 495 3864</phone>
							<email>sob@harvard.edu</email>
						</address>
					</author>
					<date year="1997" month="March"/>
					<area>General</area>
					<keyword>keyword</keyword>
					<abstract>
						<t>
							In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. Authors who follow these guidelines should incorporate this phrase near the beginning of their document:
							<list>
								<t>
									The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.
								</t>
							</list>
						</t>
						<t>
							Note that the force of these words is modified by the requirement level of the document in which they are used.
						</t>
					</abstract>
				</front>
				<seriesInfo name="BCP" value="14"/>
				<seriesInfo name="RFC" value="2119"/>
				<format type="TXT" octets="4723" target="http://www.rfc-editor.org/rfc/rfc2119.txt"/>
				<format type="HTML" octets="17970" target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
				<format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/>
			</reference>
		</references>

		<section title="Glossary">
			<t>
				<list style="symbols">
					<t>Participating Peer: A computer participating in the file sharing network. </t>
				</list>
			</t>
		</section>
	</back>
</rfc>
