<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc.dtd">
<rfc ipr="none">
    <front>
        <title>Buschtrommel</title>
        <author initials='T.S.' surname='Sturm' fullname='Tobias'>
            <organization>Karlsruhe Institute of Technology</organization>
            <address>
                <email>Tobias.Sturm@student.kit.edu</email>
            </address>
        </author>
        <author initials='B.H.' surname='Halbrock' fullname='Benjamin'>
            <organization>Karlsruhe Institute of Technology</organization>
            <address>
                <email>benjamin.halbrock@student.kit.edu</email>
            </address>
        </author>
        <author initials='M.W.' surname='Winter' fullname='Moritz'>
            <organization>Karlsruhe Institute of Technology</organization>
            <address>
                <email>moritz.winter@student.kit.edu</email>
            </address>
        </author>
        <date />
        <area>Applications</area>
        <workgroup>Telematics project 12/13, Group 1</workgroup>
        <abstract>
          <t>This document is a draft for the official specification of the Buschtrommel protocol. Buschtrommel is used to find and transfer files between clients in the same network domain without the need for a central server.</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
          <t>This document specifies the Buschtrommel protocol, which is used for ad-hoc file transfer between peers in the same network domain.</t>
            <t>This specificiation defines package formats and required client behavior to enable such file transfers between conforming, well-behaved clients.</t>
            <t>This document describes the mechanisms required for completion of the following tasks:
                <list style="symbols">
                    <t>peer and file announcement</t>
                    <t>file transfer</t>
                </list>
            </t>
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.</t>
        </section>

        <section title="High Level Overview">
          <t>
            Buschtrommel is focused on scenarios, where clients (a.k.a peers) do not share files for a long time. Files are announced in a short-termed fashion. Clients will not be connected for more than a few hours. The fast announcement of new clients and files is one of the main focuses.
          </t>
          <t>The protocol features can be roughly split into two groups:
                <list style="symbols">
                    <t>announcement of peers and files</t>
                    <t>file transfers</t>
                </list>
            </t>
            <t>
                Announcement features are implemented on top of UPD and multicast groups.
                File transfers uses TCP peer-to-peer connections.
            </t>
        </section>

        <section title="General Notes">
            <t>
                Buschtrommel uses the following multicast addresses to address all participating peers:
                <list style="symbols">
                    <t>239.255.0.113 for IPv4</t>
                    <t>ff02::7171 for IPv6</t>
                </list>
                <t>File Availability Announcements as well as File Solicitations are encapsulated in a UDP packet with the Destination Port set to XXXX. All clients SHOULD listen for incoming File Availability Announcements or File Solicitations on at least one of the multicast addresses listed above. Clients MUST use the UDP checksum header field for all UDP packets. Clients SHOULD ignore incoming UDP packets that have an invalid checksum.</t>
            </t>
        </section>

        <section title="File Availability Announcement">
            <t>
                <t>A File Availability Announcement MUST contain a single JSON serialized object. This object has the following members:</t>
                <list style="symbols">
                    <t>A member named "display-name" containing a human-readable name of peer sending the message. All Unicode characters may be used. This member is OPTIONAL.</t>
                    <t>An array member named "files". This array contains a collection of objects, each representing a file available for transfer. These objects have the following members:
                        <list>
                            <t>A string member named "sha-256" containing a SHA-256 checksum of the contents of the file. This member is REQUIRED.</t>
                            <t>A member named "length" specifying the length of the file in bytes. The value of this member MUST be an integer number. This member is REQUIRED.</t>
                            <t>A member named "ttl" that specifies the expected temporal validity in seconds of the information given about the file, which includes the information that the file is available for transfer. Therefore, a TTL of 0 means that a file is no longer available. The value of the member MUST be an integer number. This member is REQUIRED.</t>
                            <t>A member named "display-name" that contains a human-readable name for the file. All Unicode characters may be used. A directory structure MAY be encoded in the value of this member. If this is the case, the '/' character MUST be used as a path separator. This member is OPTIONAL.</t>
                        </list>
                    </t>
                    <t>The values of the "sha-256" and the "display-name" members uniquely identify a file. Client MUST NOT include multiple file objects with identical values for "sha-256" and "display-name" in a single File Availability Announcement message.</t>

                    <t>This member is REQUIRED.</t>
                </list>

                <t>As soon as a file becomes available for transfer, clients SHOULD send a File Availability Announcement to all participating peers containing information about the file. Commonly, this is the case immediately after startup of a client.</t>

                <t>As soon as a file is no longer available for transfer, clients MUST send a File Availability Announcement to all participating peers containing updated information about the file. This mechanism SHOULD also be used before shutdown of a client.</t>

                <t>Clients SHOULD accumulate information about multiple files in a single message whenever possible.</t>

                <t>Clients MUST NOT send information about a file available for transfer to all participating peers if the information does not update previous information about the file. Updated information about the temporal validity of the information given about a file should only be sent if previous information expires in less than 30 seconds or if the expected validity is reduced due changed conditions (e.g. a change in network connectivity).</t>
            </t>
        </section>

        <section title="File Solicitation">
            <t>
                <t>A client may solicit File Availability Announcements from other peers by sending a File Solicitation message to all participating peers.</t>

                <t>A File Solicitation message MUST contain a single JSON serialized object. This object MUST have a member named "file-solicitation" with the boolean value "true".</t>

                <t>Clients SHOULD react to all File Solicitation messages by sending a File Availability Announcement message to the soliciting peer.</t>

                <t>.If a File Solicitation message is received by a client and a File Availability Announcement to all participating peers is outstanding in the near future (e.g. because the previously-sent availability information is about to expire), the client SHOULD prepone this announcement and SHOULD NOT send an announcement to the soliciting peer.</t>
            </t>
		</section>

	   <section title="File Transfer">
			<t>
				To request a file an client opens a new TCP Connection to the remote peer. Called FILEREQ.
				Every remote host listens at port 7171 for incoming TCP sessions. 
				<figure align='center'>
					<artwork>
+------+------+------+
| HASH |  OFF | LEN  |
+------+------+------+
|   8  |  64  |  64  |
+------+------+------+
					</artwork>
				</figure>
				HASH contains the SAH-256 hash of a file, that has been announced before. Clients SHOULD request only files, that are contained in a announcement message, that has not been expired.
				OFF indicates the offset, from which on the other peer should send from. It addresses the bytes inside the file.
				LEN indicates the number of bytes, that shall be sent. This field can be set to 0, if the peer requests all bytes from the given offset until the end
			</t>
			<t>
				After receiving a file request the remote peer SHOULD immediately start sendng the requested data over this TCP-connection.
				The peer MAY abort the connection if it is busy or the request is invalid.
				As soon as all bytes are transmitted, the TCP connection MUST be closed by the sender and the receiver.
				A receiver SHOULD close the TCP connection, if more bytes than requested are received.
				If the TCP connection gets aborted the receiver MAY reestablish a new transfer via a new FILEREQ.
				The requester MAY assume, that the host is not avaliable, if the TCP connection fails to establish with the default TCP timeout.</t>
			<t>
				If the receiving peer wants to continue an aborted file transfer, it sends a new FILEREQ, with OFF indicating the first byte, that has not been received.
			</t>
			<t>
				If a peer wants to request one file from multiple hosts, it sends multiple FILEREQ to these hosts. Each FILEREQ MUST contain a different OFF and different LEN.
				The OFFs and LENs SHOULD describe a partition of the whole file.
			</t>
		</section>
	</middle>

	<back>
		<references>
			<reference anchor="refs.RFC768">
					<front>
						<title>User Datagram Protocol</title>
						<author initials="J." surname="Postel" fullname="Jon Postel">
							<organization abbrev="ISI">USC/Information Sciences Institute</organization>
						</author>
						<date month="August" year="1980" />
					</front>
					<seriesInfo name="RFC" value="768" />
					<seriesInfo name="STD" value="6" />
			</reference>
			<reference anchor="refs.RFC793">
					<front>
					   <title>Transmission Control Protocol</title>
						<author initials="J." surname="Postel" fullname="Jon Postel">
								<organization abbrev="ISI">USC/Information Sciences Institute</organization>
						</author>
						<date month="September" year="1981" />
				</front>
				<seriesInfo name="RFC" value="793" />
				<seriesInfo name="STD" value="7" />
			</reference>
			<reference anchor="refs.RFC791">
				<front>
					<title>Internet Protocol</title>
					<author initials="J." surname="Postel" fullname="Jon Postel">
						<organization abbrev="ISI">USC/Information Sciences Institute</organization>
					</author>
					<date month="September" year="1981" />
				</front>
				<seriesInfo name="RFC" value="791" />
				<seriesInfo name="STD" value="5" />
			</reference>
		</references>
			
		<section title="Glossar">
				<list>
					<t>Peer - a client in general </t>
					<t>Host - an client, which offers a file to others</t>
				</list>
		</section>
	</back>
</rfc>
